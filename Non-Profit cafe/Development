
Oracle 23c Instance Management with Docker

Install Docker

sudo apt install docker.io
Check Docker Status:

sudo systemctl status docker

Verify Docker Installation:

sudo docker ps
Run Oracle 23c Database Container
sudo docker run -itd --name LegendOfZelda \
-p 1521:1521 \
-e ORACLE_PWD='p1@2s0s3word' \
-v /home/legendofzelda:/u01/app/oracle/oradata \
container-registry.oracle.com/database/free:latest

Access the Container

sudo docker exec -it LegendOfZelda   

Connect to Oracle using SQL*Plus

sqlplus sys@localhost:1521 as sysdba
________________________________________

Creating and Managing Pluggable Databases (PDBs) Create a PDB

CREATE PLUGGABLE DATABASE triforce 
ADMIN USER Link IDENTIFIED BY zelda 
CREATE_FILE_DEST='/home/LegendofZelda';
ALTER PLUGGABLE DATABASE triforce OPEN;

Log in to the PDB as SYS

sqlplus sys@localhost:1521/triforce as sysdba

Grant Access to the PDB User

GRANT CREATE SESSION TO link;
GRANT CREATE TABLE TO link;
GRANT UNLIMITED TABLESPACE TO link;
________________________________________
Database Schema Design
Key Tables
1.	current_inventory
2.	discount
3.	staff
4.	payments
5.	inventory_transaction
6.	details
7.	attachment
8.	order_items
9.	order_count
10.	single_serving
11.	menu
CREATE TABLE "current_inventory" (
  "current_inventory_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "item_name" VARCHAR2(50) NOT NULL,
  "brand_name" VARCHAR2(50),
  "stock_quantity" NUMBER(10,2) DEFAULT 0 NOT NULL,
  "unit" VARCHAR2(50) NOT NULL,
  "category" Char(10) NOT NULL,
  "create_at" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE TABLE "discount" (
  "discount_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Discount_name" VARCHAR2(15),
  "Discount_rate" NUMBER ,
  "Date_effective" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE TABLE "Staff" (
  "staff_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "First" VARCHAR2(50) NOT NULL,
  "Last" VARCHAR2(50) NOT NULL,
  "position" VARCHAR2(50),
  "salary" NUMBER(5,2) CHECK (salary > 0),
  "hire_date" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  "email" VARCHAR2(20) UNIQUE
);

CREATE TABLE "Payments" (
  "payment_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_count" NUMBER NOT NULL,
  "payment_date" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  "payment_method" VARCHAR2(10) DEFAULT 'Cash' NOT NULL CHECK (payment_method IN ('Cash', 'Card', 'Mobile')),
  "Amount_paid" NUMBER(10,2),
  "staff_id" NUMBER NOT NULL,
  "discount_id" NUMBER NOT NULL,
  "status" VARCHAR2(10) DEFAULT 'Pending' NOT NULL CHECK (status IN ('Pending', 'Cancelled', 'Complete')),
  CONSTRAINT "FK_payments.discount_id" FOREIGN KEY ("discount_id") REFERENCES "Discount"("discount_id"),
  CONSTRAINT "FK_payments.staff_id" FOREIGN KEY ("staff_id") REFERENCES "Staff"("staff_id")
)
CREATE TABLE "Inventory_Transaction" (
  "inventory_transaction_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "stock_quantity" NUMBER(5,2) NOT NULL,
  "action" VARCHAR2(10) DEFAULT 'Add' NOT NULL CHECK (action IN ('Add', 'Used')),
  "current_inventory_id" NUMBER NOT NULL,
  "last_updated" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT "FK_inventory_transaction.current_inventory_id" FOREIGN KEY ("current_inventory_id") REFERENCES "Current_Inventory"("current_inventory_id")
) 
PARTITION BY RANGE (payment_date) INTERVAL ( NUMTOYMINTERVAL (1, 'YEAR'))
(
PARTITION p_initial VALUES LESS THAN (TO_DATE('2024-10-01', 'YYYY-MM-DD'))
);


CREATE TABLE "Details" (
  "details_jid" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "payment_id" NUMBER NOT NULL,
  "description" VARCHAR2(50),
  "amount_paid" NUMBER(10,2),
  "DebitCredit" Varchar(10),
  CONSTRAINT "FK_Details.payment_id"
    FOREIGN KEY ("payment_id")
      REFERENCES "payments"("payment_id")
);

CREATE TABLE "Attachment" (
  "attachment_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "details_id" NUMBER NOT NULL,
  "file_path" VARCHAR2(255),
  "upload_at" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT "FK_Attachment.attachment_id"
    FOREIGN KEY ("attachment_id")
      REFERENCES "Details"("details_jid")
);

CREATE TABLE "Order_Items" (
 CREATE TABLE "order_items" (
  "order_item_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_count" NUMBER NOT NULL,
  "item_id" NUMBER NOT NULL,
  "quantiity" NUMBER,
  "Subtotal" NUMBER(6,2),
  "order_date" DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT "FK_order_items.order_count" FOREIGN KEY ("order_count") REFERENCES "Payments"("order_count")
)
PARTITION BY (order_date) INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) (
PARTITION p_inital VALUES LESS THAN (DATE '2024-10-01')
)

CREATE TABLE "order_count" (
  "order_count" NUMBER DEFAULT 1 NOT NULL  CHECK ( "order_count" > 0),
  CONSTRAINT "FK_order_count.order_count"
    FOREIGN KEY ("order_count")
      REFERENCES "order_items"("order_count")
);

CREATE TABLE "single_serving" (
  "single_serving_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "size" VARCHAR2(50) NOT NULL,
  "amount" NUMBER(5,2) NOT NULL,
  "Unit" VARCHAR2(10) NOT NULL,
  "Availability" NUMBER(1) DEFAULT 1 NOT NULL CHECK ("Availability" IN (1, 0)),
  "current_inventory_id" NUMBER NOT NULL
);

CREATE TABLE "Menu" (
  "item_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "item_name" VARCHAR2(100),
  "description" VARCHAR2(50),
  "price" NUMBER(5,2),
  "category" VARCHAR2(50),
  "availability_status" NUMBER(1) DEFAULT 1 NOT NULL CHECK (availability_status IN (1, 0)),
  "single_serving_id" NUMBER NOT NULL,
  CONSTRAINT "FK_menu.single_serving_id" FOREIGN KEY ("single_serving_id") REFERENCES "Single_Serving"("single_serving_id")
);

CREATE TABLE "Inventory_Transaction" (
  "inventory_transaction_id" NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "stock_quantity" NUMBER(5,2) NOT NULL,
  "action" VARCHAR2(10) DEFAULT 'Add' NOT NULL CHECK (action IN ('Add', 'Used')),
  "current_inventory_id" NUMBER NOT NULL,
  "last_updated" TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT "FK_inventory_transaction.current_inventory_id" FOREIGN KEY ("current_inventory_id") REFERENCES "Current_Inventory"("current_inventory_id")
) 
PARTITION BY RANGE (payment_date) INTERVAL ( NUMTOYMINTERVAL (1, 'YEAR'))
(
PARTITION p_initial VALUES LESS THAN (TO_DATE('2024-10-01', 'YYYY-MM-DD'))
);________________________________________
Stored Procedures
CREATE OR REPLACE PROCEDURE Order_Count_Increment (
    order_out OUT NUMBER
) IS
BEGIN
    SELECT order_count INTO order_out
    FROM order_count 
    WHERE order_date = TRUNC(SYSDATE);

    UPDATE order_count
    SET order_count = order_count + 1
    WHERE order_date = TRUNC(SYSDATE);

    COMMIT;

EXCEPTION 
WHEN NO_DATA_FOUND THEN
          DBMS_OUTPUT.PUT_LINE('No data found for today.');
      END;
END;
/

CREATE OR REPLACE PROCEDURE order_items_selection(
in_order_count IN NUMBER,
in_item_id IN NUMBER,
in_quantity IN NUMBER,
in_subtotal IN NUMBER (6,2)
)
IS 

BEGIN

INSERT INTO order_items (order_count, item_id, quantity, subtotal) 
VALUES (in_order_count, in_item_id, in_quantity, in_subtotal)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE order_Inventory_description(
in_size IN VARCHAR2(50),
in_amount IN NUMBER(5,2),
in_unit_size IN VARCHAR2(10),
in_availability IN NUMBER (1),
in_inventory_id IN NUMBER 
)
IS 

BEGIN

INSERT INTO order_Inventory_description (size, amount, Unit_use, Availabitity,Inventory_id) 
VALUES (in_size, in_amount, in_Unit_use, in_Availabitity, in_Inventory_id)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);

END;
/


CREATE OR REPLACE PROCEDURE insert_current_inventory(
in_item_name IN VARCHAR2(50),
in_brand_nameIN NUMBER(5,2),
in_stock_quantity IN VARCHAR2(10),
in_unit IN NUMBER (1),
in_category IN NUMBER
)
IS 

BEGIN

INSERT INTO current_inventory (item_name, brand_name, stock_quantity, unit,category) 
VALUES (in_item_name, in_brand_name, in_stock_quantity, in_unit, in_category)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);

END;
/

CREATE OR REPLACE PROCEDURE insert_menu(
in_item_name IN VARCHAR2(100),
in_descriptionIN VARCHAR2(50),
in_price IN NUMBER(5,2),
in_availability_status IN NUMBER(1),
in_category IN VARCHAR2(50),
in_order_inventory_description_id IN NUMBER

)
IS 

BEGIN

INSERT INTO current_inventory (item_name, description, price,category, availability_status,order_inventory_description_id ) 
VALUES (in_item_name, in_description, in_price, in_category, in_availability_status, in_order_inventory_description_id)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);


END;
/

CREATE OR REPLACE PROCEDURE insert_current_inventory(
in_Discount_name IN VARCHAR2(50),
in_Discount_rate IN NUMBER(5,2),
in_Date_effective IN VARCHAR2(10)
)
IS 

BEGIN

INSERT INTO current_inventory (Discount_name, Discount_rate, Date_effective) 
VALUES (in_Discount_name, in_Discount_rate, in_Date_effective)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);


END;
/

CREATE OR REPLACE PROCEDURE insert_staff(
in_order_count IN NUMBER ,   
in_payment_method IN VARCHAR(10), 
in_Amount_paid IN NUMBER(10,2),  
in_discount IN NUMBER, 
in_status IN NUMBER
)
IS

BEGIN

INSERT INTO payments (order_count,   payment_method, Amount_paid,  discount, status)
VALUES (in_order_count,  in_payment_date, in_payment_method, in_Amount_paid,  in_discount, in_status)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);


END;
/

CREATE OR REPLACE PROCEDURE insert_staff(
in_order_count IN NUMBER ,   
in_payment_method IN VARCHAR(10), 
in_Amount_paid IN NUMBER(10,2),  
in_discount IN NUMBER, 
in_status IN NUMBER
)
IS

BEGIN

INSERT INTO payments (order_count,   payment_method, Amount_paid,  discount, status)
VALUES (in_order_count,  in_payment_date, in_payment_method, in_Amount_paid,  in_discount, in_status)

DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);


END;
/

CREATE OR REPLACE PROCEDURE Attachment (
    in_details_id IN NUMBER,
    in_file_path IN VARCHAR2
) IS
BEGIN
    INSERT INTO Attachment (details_id, file_path)
    VALUES (in_details_id, in_file_path);

    DBMS_OUTPUT.PUT_LINE('Insert successful.');

COMMIT;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: Duplicate value. Check the unique constraint.');
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Value too large or invalid datatype.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);

END;
/
________________________________________
Triggers
CREATE OR REPLACE TRIGGER trigger_after_insert_payments
AFTER INSERT ON payments
FOR EACH ROW
DECLARE
BEGIN
    -- Only update inventory when stock quantity is required
    IF EXISTS (
        SELECT 1
        FROM order_items oi
        WHERE oi.order_count = :NEW.order_count
    ) THEN
        INSERT INTO inventory_transaction (stock_quantity, action, current_inventory_id)
        SELECT oi.quantity * amount AS stock_quantity, 'Used' AS action, oid.current_inventory_id
        FROM order_items oi
        JOIN menu m ON m.item_id = oi.item_id
        JOIN single_serving oid ON m.single_serving_id = oid.single_serving_id
        WHERE oi.order_count = :NEW.order_count;

    END IF;

COMMIT;

WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No data found for today.');

END;
/
________________________________________
Indexes
CREATE INDEX idx_staff_name
on staff (First,  Last)

CREATE UNIQUE idx_staff_email
on staff ( email )

CREATE INDEX idx_order_count
on order_items (order_count)

CREATE INDEX idx_menu_category
on menu (category)

CREATE INDEX idx_payment_status
ON payment (status)

CREATE INDEX idx_payment_method
ON payment (payment_method)

CREATE INDEX idx_inventory_stock_check
ON inventory_transaction (current_inventory_id, stock_quantity);
________________________________________
