
Retail inventory Database

1st Normal Form:
•	Each attribute should contain atomic value.
•	A column should contain value from the same domain.
•	Each column should have a unique name. 
•	No ordering to rows and columns.
•	No duplicate rows.
2ND Normal Form
•	It must be 1st Normal Form.
•	No Patial dependency in the relation (Partial dependency occurs when the left-hand side of a candidate key points non-prime attributes).
3rd Normal Form
•	It must be 2nd Normal Form.																         
•	No transitive dependency for non-prime attributes (To be non-transitive and 3NF at least one of these must be true: Either the left-hand side of functional dependency is super key or the right-hand side points to a prime attribute).
BCNF
•	if it is 3NF. 
•	For each functional dependency there must be a super key.
Preserving Dependency Decomposition
•	is another property of decomposed relational database schema D in which each functional dependency X -> Y specified in F either appeared directly in one of the relation schemas Ri in the decomposed D or could be inferred from the dependencies that appear in some Ri.

Lossless Join Decomposition
•	Lossless join decomposition is a decomposition of a relation R into relations R1, R2 such that if we perform a natural join of relation R1 and R2, it will return the original relation R. This is effective in removing redundancies from databases while preserving the original data.

Database Relations
R:{
	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26
27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46 		
}

FD {1 -> 2 to 6 storage, 7->1, 8 to 11 Product, 12 ->1, 13, 14 supplier, 15 ->12, 18, 1, 16, 17 orderDetails, 18 ->22, 19, 20, 21 paymentMethod, 22->23 to 27 shareHolder, 
28 ->22, 29, 30, 31 transaction  32 -> 33,34,35 category   36,-> 28, 32, 37 to 42 orders
42 -> 36, 43 paymentMethod, 44 -> 28, 45 to 48 orderDetails, 1, 32 -> 1, 32 Shipper shopper  shoppership }

CREATE TABLE `ShopperShip` (
  `PK_shopperShip` VARCHAR(10) PRIMARY KEY,
  `fullAddress` TEXT,
  `FK_productName` VARCHAR(10) ,
  `quantity` BOOL
);

CREATE TABLE `shopper` (
  `PK_shopper` VARCHAR(10) PRIMARY KEY,
  `firstName` VARCHAR(25),
  `lastName` VARCHAR(50),
  `contactNumber` VARCHAR(15),
  `emailAddress` TEXT
);

CREATE TABLE `Shippers` (
  `PK_shippers` VARCHAR(10) PRIMARY KEY,
  `orderDate` DATETIME,
  `status` Bool,
  `FK_paymentMethod` VARCHAR(10)
);

CREATE TABLE `PaymentMethod` (
  `PK_paymentMethod` VARCHAR(10) PRIMARY KEY,
  `paymentMethod` VARCHAR(50),
  `description` TEXT,
  `discountRate` Decimal(2,2)
);

CREATE TABLE `Orders` (
  `PK_Order` VARCHAR(10) PRIMARY KEY,
  `orderDate` DATETIME,
  `status` Bool,
  `FK_paymentMethod` VARCHAR(10),
  `FK_shopper` VARCHAR(10)
);

CREATE TABLE `Category` (
  `PK_category` INT PK,
  `categoryName` Varchar(50)
);

CREATE TABLE `Transaction` (
  `PK_transaction` INT PK,
  `FK_product` INT FK,
  `transactionType` Varchar(50),
  `transactionDate` datetime,
  `quantity` INT,
  `totalAmount` decimal(10,2)
);

CREATE TABLE `Storage` (
  `PK_storage` INT PK,
  `storageType` INT FK,
  `location` varchar(25)
);

CREATE TABLE `Supplier` (
  `PK_supplier` INT PK,
  `supplierName` Varchar(50),
  `contactPerson` Varchar(50),
  `contactNumber` Varchar(14),
  `e-Mail` Varchar(50),
  `state` Varchar(50),
  `postalcode` INT,
  `city` varchar(50),
  `fax` varchar(15),
  `Address` varchar(50),
  `Notes` text
);

CREATE TABLE `Product` (
  `PK_product` INT PK,
  `productName` Varchar(50),
  `FK_storage` INT FK,
  `FK_category` INT FK,
  `FK_supplier` INT FK,
  `unitPrice` Decimal (10.2),
  `stockQuantity` INT
);

CREATE TABLE `orderDetails` (
  `PK_orderDetails` VARCHAR(10) PRIMARY KEY,
  `FK_orderID` VARCHAR(10),
  `FK_product` INT FK,
  `quantity` INT,
  `FK_shippers` VARCHAR(10)
);
